/**
 * 归纳总结
 * 从1 到 n 中1出现的次数
 */

public class NumberOf1Between1AndN {
    /**
     * 个位上1出现的次数
     * 在个位数上，1会每隔10出现一次，例如1、11、21等等，我们发现以10为一个阶梯的话，每一个完整的阶梯里面都有一个1，例如数字22，
     * 按照10为间隔来分三个阶梯，在完整阶梯0-9，10-19之中都有一个1，但是19之后有一个不完整的阶梯，我们需要去判断这个阶梯中会不会出现1，
     * 易推断知，如果最后这个露出来的部分小于1，则不可能出现1（这个归纳换做其它数字也成立）。
     * n/10 * 1+(n%10!=0 ? 1 : 0)
     * <p>
     * 十位上1出现的次数
     * 现在说十位数，十位数上出现1的情况应该是10-19，依然沿用分析个位数时候的阶梯理论，我们知道10-19这组数，每隔100出现一次，这次我们的阶梯是100，
     * 例如数字317，分析有阶梯0-99，100-199，200-299三段完整阶梯，每一段阶梯里面都会出现10次1（从10-19），最后分析露出来的那段不完整的阶梯。
     * 我们考虑如果露出来的数大于19，那么直接算10个1就行了，因为10-19肯定会出现；如果小于10，那么肯定不会出现十位数的1；
     * 如果在10-19之间的，我们计算结果应该是k - 10 + 1。例如我们分析300-317，17个数字，1出现的个数应该是17-10+1=8个。
     * 设k = n % 100，即为不完整阶梯段的数字 归纳式为：(n / 100) * 10 + (if(k > 19) 10 else if(k < 10) 0 else k - 10 + 1)
     * <p>
     * 百位上1出现的次数
     * 现在说百位1，我们知道在百位，100-199都会出现百位1，一共出现100次，阶梯间隔为1000，100-199这组数，每隔1000就会出现一次。
     * 这次假设我们的数为2139。跟上述思想一致，先算阶梯数 * 完整阶梯中1在百位出现的个数，即n/1000 * 100得到前两个阶梯中1的个数，那么再算漏出来的部分139，
     * 沿用上述思想，不完整阶梯数k199，得到100个百位1，100<=k<=199则得到k - 100 + 1个百位1。
     * 设k = n % 1000, 归纳式为：(n / 1000) * 100 + (if(k >199) 100 else if(k < 100) 0 else k - 100 + 1)
     * <p>
     * ……
     * <p>
     * 对上面进行归纳整理：
     * 个位：k = n % 10 位数上1的个数为：n / 10 * 1 + (if(k > 1) 1 else if(k < 1) 0 else k - 1 + 1)
     * <p>
     * 设i为计算1所在的位数，i=1表示计算个位数的1的个数，10表示计算十位数的1的个数等等
     * k = n % (i * 10)
     * count(i) = (n / (i * 10)) * i + (if(k > i * 2 - 1) i else if(k < i) 0 else k - i + 1)
     * 消除if else判断，不计算i * 2 - 1了，我们只需保证k - i + 1在[0, i]区间内就行
     * (if(k > i * 2 - 1) i else if(k < i) 0 else k - i + 1) 可以写为 min(max((n mod (i*10))−i+1,0),i)
     * <p>
     * 从1到10^n
     * sum1 = sum(count(i))，i = Math.pow(10, j), 0<=j<=log10(n)
     */
    public int numberOf1Between1AndN(int n) {
        if (n <= 0)
            throw new RuntimeException("输入非法!");
        int count = 0;
        for (long i = 1; i <= n; i *= 10) {
            long diviver = i * 10;
            count += (n / diviver) * i + Math.min(Math.max(n % diviver - i + 1, 0), i);
        }
        return count;
    }
}
